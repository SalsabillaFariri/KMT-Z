# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N-ZUtl9R7LJy9BWLwYh-QtcAEI49h6hw

IMPORT LIBRARY
"""

import tensorflow as tf
import os
print(tf.__version__)

"""AMBIL DATASET"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /content/rockpaperscissors.zip

"""EKSTRAK ZIP DATASET"""

!unzip /content/rockpaperscissors.zip -d /content/rockpaperscissors

"""BUAT FOLDER TRAIN DAN VALIDASI"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    validation_split = 0.4,
                    fill_mode = 'nearest')

data_dir = os.path.join("/content/rockpaperscissors/rockpaperscissors/rps-cv-images")
batch_size = 32
img_height = 150
img_width = 150

train_ds = train_datagen.flow_from_directory(
  data_dir,
  subset="training",
  seed=123,
  target_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = train_datagen.flow_from_directory(
  data_dir,
  subset="validation",
  seed=123,
  target_size=(img_height, img_width),
  batch_size=batch_size)

class_names = ['paper', 'rock', 'scissors']

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape= (150,150,3)),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Conv2D(64,(3,3), activation= 'relu'),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Conv2D(128,(3,3), activation= 'relu'),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(512, activation= 'relu'),
  tf.keras.layers.Dense(3, activation= 'softmax')
])

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""BUAT FUNGSI CALLBACK"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('loss') < 0.09):
      print()
      print("akurasi mencapai lebih dari 96%!")
      self.model.stop_training = True

callbacks = myCallback()

"""TRAIN MODEL"""

history_model = model.fit(
    train_ds,
    steps_per_epoch = 16, # berapa batch yang akan dieksekusi pada setiap epoch
    epochs = 30,
    validation_data = val_ds, # menampilkan akurasi pengujian data validasi
    validation_steps = 5, # berapa batch yang akan dieksekusi pada setiap epoch
    verbose =2,
      callbacks=[callbacks]
)

"""VISUALIASASI HASIL TRAIN MODEL"""

